#include <iostream>
#include <fstream>
#include <queue>
#include <vector>

using namespace std;

class MedianFinder {
private:
    priority_queue<int> maxHeap;
    priority_queue<int, vector<int>, greater<int>> minHeap;

public:
    void addNum(int num) {
        if(maxHeap.empty() || num <= maxHeap.top()) {
            maxHeap.push(num);
        } else {
            minHeap.push(num);
        }
        if(maxHeap.size() > minHeap.size() + 1) {
            minHeap.push(maxHeap.top());
            maxHeap.pop();
        } else if(minHeap.size() > maxHeap.size() + 1) {
            maxHeap.push(minHeap.top());
            minHeap.pop();
        }
    }

    double findMedian() {
        if(maxHeap.size() == minHeap.size()) {
            return (maxHeap.top() + minHeap.top()) / 2.0;
        } else {
            return maxHeap.top();
        }
    }
};

int main() {
    string filePath = "C:\\Users\\admin\\Downloads\\input.txt";
    fstream inputFile(filePath);
    if(!inputFile) {
        cerr << "Error opening input file." << endl;
        return 1;
    }
    MedianFinder medianFinder;
    int num;
    while(inputFile >> num) {
        medianFinder.addNum(num);
    }
    cout << "Median: " << medianFinder.findMedian() << endl;
    return 0;
}
